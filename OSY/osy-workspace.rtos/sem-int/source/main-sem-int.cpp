// **************************************************************************
//
//               FreeRTOS demo program for OSY labs
//
// Subject:      Operating Systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 02/2022
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         Semaphore and interrupt.
//
// **************************************************************************
//
// All mapped LEDs and switches and their PINs and GPIOs:
// See schema in APPS syllabus.
//
// Switches:
// Name		PIN				GPIO
// PTC9		SW_PTC9_PIN		SW_PTC9_GPIO
// PTC10	SW_PTC10_PIN	SW_PTC10_GPIO
// PTC11	SW_PTC11_PIN	SW_PTC11_GPIO
// PTC12	SW_PTC12_PIN	SW_PTC12_GPIO
//
// LEDs:
// Name		PIN				GPIO
// PTA1		LED_PTA1_PIN   LED_PTA1_GPIO
// PTA2		LED_PTA2_PIN   LED_PTA2_GPIO
//
// PTC0		LED_PTC0_PIN   LED_PTC0_GPIO
// PTC1		LED_PTC1_PIN   LED_PTC1_GPIO
// PTC2		LED_PTC2_PIN   LED_PTC2_GPIO
// PTC3		LED_PTC3_PIN   LED_PTC3_GPIO
// PTC4		LED_PTC4_PIN   LED_PTC4_GPIO
// PTC5		LED_PTC5_PIN   LED_PTC5_GPIO
// PTC7		LED_PTC7_PIN   LED_PTC7_GPIO
// PTC8		LED_PTC8_PIN   LED_PTC8_GPIO
//
// PTB2		LED_PTB2_PIN   LED_PTB2_GPIO
// PTB3		LED_PTB3_PIN   LED_PTB3_GPIO
// PTB9		LED_PTB9_PIN   LED_PTB9_GPIO
// PTB10	LED_PTB10_PIN  LED_PTB10_GPIO
// PTB11	LED_PTB11_PIN  LED_PTB11_GPIO
// PTB18	LED_PTB18_PIN  LED_PTB18_GPIO
// PTB19	LED_PTB19_PIN  LED_PTB19_GPIO
// PTB20	LED_PTB20_PIN  LED_PTB20_GPIO
// PTB23	LED_PTB23_PIN  LED_PTB23_GPIO


// FreeRTOS kernel includes.
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "timers.h"

// System includes.
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"

// Application includes
#include "gpio_interrupts.h"

// Task priorities.
#define LOW_TASK_PRIORITY 		(configMAX_PRIORITIES - 2)
#define NORMAL_TASK_PRIORITY 	(configMAX_PRIORITIES - 1)
#define HIGH_TASK_PRIORITY 		(configMAX_PRIORITIES)

#define TASK_NAME_RED_LED		"red led"
#define TASK_NAME_LEFT_SWITCH	"left switch"
#define TASK_NAME_RIGHT_SWITCH	"right switch"

#define LED_PTA_NUM 	2
#define LED_PTC_NUM		8
#define LED_PTB_NUM		9

// pair of GPIO port and LED pin.
struct LED_Data
{
	uint32_t m_led_pin;
	GPIO_Type *m_led_gpio;
};

// all PTCx LEDs in array
LED_Data g_led_ptc[ LED_PTC_NUM ] =
{
		{ LED_PTC0_PIN, LED_PTC0_GPIO },
		{ LED_PTC1_PIN, LED_PTC1_GPIO },
		{ LED_PTC2_PIN, LED_PTC2_GPIO },
		{ LED_PTC3_PIN, LED_PTC3_GPIO },
		{ LED_PTC4_PIN, LED_PTC4_GPIO },
		{ LED_PTC5_PIN, LED_PTC5_GPIO },
		{ LED_PTC7_PIN, LED_PTC7_GPIO },
		{ LED_PTC8_PIN, LED_PTC8_GPIO },
};

// global variables
SemaphoreHandle_t g_sem_left_switch;
SemaphoreHandle_t g_sem_right_switch;

int32_t g_red_led_index = 0;


// Tasks
void task_left_switch( void *t_arg )
{
	while ( 1 )
	{
		xSemaphoreTake( g_sem_left_switch, portMAX_DELAY );

		g_red_led_index = 0;

		vTaskDelay( 1 );
	}
}

void task_show_red_led( void *t_arg )
{
	int32_t l_last_index = -1;

	while ( 1 )
	{
		// check range of g_red_led_index
		if ( g_red_led_index >= LED_PTC_NUM )
			g_red_led_index = LED_PTC_NUM - 1;
		if ( g_red_led_index < 0 )
			g_red_led_index = 0;

		// position changed?
		if ( l_last_index != g_red_led_index )
		{
			if ( l_last_index < 0 ) l_last_index = g_red_led_index;

			GPIO_PinWrite( g_led_ptc[ l_last_index ].m_led_gpio, g_led_ptc[ l_last_index ].m_led_pin, 0 );
			GPIO_PinWrite( g_led_ptc[ g_red_led_index ].m_led_gpio, g_led_ptc[ g_red_led_index ].m_led_pin, 1 );

			l_last_index = g_red_led_index;
		}

		vTaskDelay( 1 );
	}
}

// Start application
int main( void ) {

    // Init board hardware.
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
    BOARD_InitDebugConsole();

    // Initialize GPIO for interrupts
    InitGPIOInterrupts();

    PRINTF( "FreeRTOS demo program uses interrupts (ISR) and semaphores.\r\n" );
    PRINTF( "GPIO interrupts are enabled.\r\n" );
    PRINTF( "Interrupts are generated by switches, see 'gpio_interrupts.cpp' file.\r\n" );
    PRINTF( "Pressing the right switch will move red LED to right.\r\n" );
    PRINTF( "Pressing the left switch will move red LED back to left side.\r\n" );

    // Create tasks
    if ( xTaskCreate(
    		task_left_switch,
			TASK_NAME_LEFT_SWITCH,
			configMINIMAL_STACK_SIZE + 100,
			NULL,
			NORMAL_TASK_PRIORITY,
			NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_LEFT_SWITCH );
    }

    if ( xTaskCreate( task_show_red_led, TASK_NAME_RED_LED, configMINIMAL_STACK_SIZE + 100, NULL, HIGH_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_RED_LED );
    }

    vTaskStartScheduler();

    while ( 1 );

    return 0 ;
}
